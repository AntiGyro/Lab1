import arcpy

def setup():
    #### CHANGE YOUR WORKSPACE HERE ####
    arcpy.env.workspace = r"C:\Users\natha\Documents\School\Nathan\Fall 2023\ProgForGis\Lab1\WestNileOutbreak.gdb"
    arcpy.env.overwriteOutput = True

    # Create an empty list for output layer names for later use in the intersect function
    buffer_layer_name_list = []

def buffer(layer_name, buf_dist):

    # Buffer the incoming layer by the buffer distance and add names to the list
    output_buffer_layer_name = f"buf_{layer_name}"
    print(f"Buffering {layer_name} to generate {output_buffer_layer_name} layer...")
    buffer_layer_name_list.append(output_buffer_layer_name)

    # Run the buffer analysis
    arcpy.analysis.Buffer(layer_name,output_buffer_layer_name,buf_dist,"FULL","ROUND","All")

def intersect():
    # Run an intersect operation on multiple input layers
    arcpy.Intersect_analysis(buffer_layer_name_list, intersect_lyr_name)
    print("Intersect operation running...")

def spatial_join():
    # join the address layer and the intersect layer
    print("Join operation running...")
    arcpy.analysis.SpatialJoin("Addresses", intersect_lyr_name, "joined_addresses")

# I had to add this function in order to pass the joined_addresses variable into the mix when adding it to the map
def add_layer_to_map(joined_addresses):
    #### CHANGE YOUR PROJECT PATH HERE ####
    proj_path = r"C:\Users\natha\Documents\School\Nathan\Fall 2023\ProgForGis\Lab1"
    aprx = arcpy.mp.ArcGISProject(rf"{proj_path}\WestNileOutbreak.aprx")

    map_doc = aprx.listMaps()[0]
    map_doc.addDataFromPath(rf"{proj_path}\WestNileOutbreak.gdb\{joined_addresses}")

    aprx.save()

if __name__== '__main__':
    setup()

    # To buffer the layers appropriately, I had to create a dictionary to store the value pairs
    # This way it would ask for the buffer values all at once instead of one at a time, which was technically the instruction, I think.
    buffer_answer_list = {}
    #### VERIFY YOUR LAYER NAMES HERE ####
    buffer_layer_list = ["Mosquito_Larval_Sites", "Wetlands", "Lakes_and_Reservoirs___Boulder_County", "OSMP_Properties"]

    # Create an empty list for output layer names for later use in the intersect function
    buffer_layer_name_list = []

    # Loop through the layers in layer list and ask for a buffer distance
    for layer in buffer_layer_list:
        buffer_question = input(f"Please input a buffer distance for {layer}")

        # Add the layer and answer pair to the buffer answer dictionary we created
        buffer_answer_list[layer] = buffer_question

    # Now loop through the answer/value pairs in the dictionary and create the appropriate buffer for each layer
    for layer, distance in buffer_answer_list.items():
        buffer(layer, distance)

    # Ask user for an output layer name here, so it's outside the function
    intersect_lyr_name = input("What would you like to name the layer generated by our intersect function?")

    intersect()

    spatial_join()

    add_layer_to_map("joined_addresses")




